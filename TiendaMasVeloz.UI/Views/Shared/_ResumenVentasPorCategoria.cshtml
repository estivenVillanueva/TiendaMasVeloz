@model IEnumerable<TiendaMasVeloz.BLL.DTOs.DetalleFacturaDTO>

@{
    var ventasPorCategoria = Model
        .GroupBy(d => d.NombreProducto)
        .Select(g => new
        {
            Categoria = g.Key,
            CantidadVendida = g.Sum(d => d.Cantidad),
            TotalVentas = g.Sum(d => d.Subtotal),
            CantidadProductos = g.Select(d => d.IdProducto).Distinct().Count()
        })
        .OrderByDescending(v => v.TotalVentas)
        .ToList();

    var totalVentas = ventasPorCategoria.Sum(v => v.TotalVentas);
}

<div class="card mb-4">
    <div class="card-header">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <i class="fas fa-chart-pie me-1"></i>
                Ventas por Categoría
            </div>
            <div class="btn-group btn-group-sm">
                <button type="button" class="btn btn-outline-primary active" onclick="cambiarVistaCategoria('tabla')">
                    <i class="fas fa-table"></i>
                </button>
                <button type="button" class="btn btn-outline-primary" onclick="cambiarVistaCategoria('grafico')">
                    <i class="fas fa-chart-pie"></i>
                </button>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div id="vistaTablaCategorias">
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Categoría</th>
                            <th>Cantidad Vendida</th>
                            <th>Total Ventas</th>
                            <th>Productos Diferentes</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var venta in ventasPorCategoria)
                        {
                            <tr>
                                <td>@venta.Categoria</td>
                                <td>@venta.CantidadVendida</td>
                                <td>@venta.TotalVentas.ToString("C")</td>
                                <td>@venta.CantidadProductos</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div id="vistaGraficoCategorias" style="display: none;">
            <canvas id="graficoVentasCategorias" style="max-height: 300px;"></canvas>
        </div>
    </div>
</div>

<style>
    .color-indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        margin-right: 8px;
    }
</style>

<script>
    let chartCategorias;

    function cambiarVistaCategoria(vista) {
        const tablaCategorias = document.getElementById('vistaTablaCategorias');
        const graficoCategorias = document.getElementById('vistaGraficoCategorias');
        const botones = document.querySelectorAll('.btn-group .btn');

        if (vista === 'tabla') {
            tablaCategorias.style.display = 'block';
            graficoCategorias.style.display = 'none';
            botones[0].classList.add('active');
            botones[1].classList.remove('active');
        } else {
            tablaCategorias.style.display = 'none';
            graficoCategorias.style.display = 'block';
            botones[0].classList.remove('active');
            botones[1].classList.add('active');
            
            if (!chartCategorias) {
                inicializarGrafico();
            }
        }
    }

    function inicializarGrafico() {
        const datos = @Html.Raw(Json.Serialize(ventasPorCategoria.Select(v => new
        {
            categoria = v.Categoria,
            ventas = v.TotalVentas,
            cantidad = v.CantidadVendida
        })));

        const ctx = document.getElementById('graficoVentasCategorias').getContext('2d');
        chartCategorias = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: datos.map(d => d.categoria),
                datasets: [{
                    data: datos.map(d => d.ventas),
                    backgroundColor: datos.map(d => obtenerColorCategoria(d.categoria)),
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'right'
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const value = context.raw;
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = ((value / total) * 100).toFixed(1);
                                return `$${value.toFixed(2)} (${percentage}%)`;
                            }
                        }
                    }
                }
            }
        });
    }

    @functions {
        string ObtenerColorCategoria(string categoria)
        {
            // Colores predefinidos para categorías
            var colores = new Dictionary<string, string>
            {
                { "Bicicletas", "#FF6384" },
                { "Accesorios", "#36A2EB" },
                { "Repuestos", "#FFCE56" },
                { "Ropa", "#4BC0C0" },
                { "Herramientas", "#9966FF" },
                { "Otros", "#FF9F40" }
            };

            return colores.ContainsKey(categoria) ? colores[categoria] : "#777777";
        }
    }

    function obtenerColorCategoria(categoria) {
        const colores = {
            'Bicicletas': '#FF6384',
            'Accesorios': '#36A2EB',
            'Repuestos': '#FFCE56',
            'Ropa': '#4BC0C0',
            'Herramientas': '#9966FF',
            'Otros': '#FF9F40'
        };

        return colores[categoria] || '#777777';
    }
</script> 